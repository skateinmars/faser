package actions

import (
	"faser_manager/models"
	"fmt"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Pad)
// DB Table: Plural (pads)
// Resource: Plural (Pads)
// Path: Plural (/pads)
// View Template Folder: Plural (/templates/pads/)

// PadsResource is the resource for the Pad model
type PadsResource struct {
	buffalo.Resource
}

// List gets all Pads. This function is mapped to the path
// GET /pads
func (v PadsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	pads := &models.Pads{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Pads from the DB
	if err := q.All(pads); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, pads))
}

// Show gets the data for one Pad. This function is mapped to
// the path GET /pads/{pad_id}
func (v PadsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Pad
	pad := &models.Pad{}

	// To find the Pad the parameter pad_id is used.
	if err := tx.Find(pad, c.Param("pad_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, pad))
}

// New renders the form for creating a new Pad.
// This function is mapped to the path GET /pads/new
func (v PadsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Pad{}))
}

// Create adds a Pad to the DB. This function is mapped to the
// path POST /pads
func (v PadsResource) Create(c buffalo.Context) error {
	// Allocate an empty Pad
	pad := &models.Pad{}

	// Bind pad to the html form elements
	if err := c.Bind(pad); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(pad)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, pad))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "pad.created.success"))
	// and redirect to the pads index page
	return c.Render(201, r.Auto(c, pad))
}

// Edit renders a edit form for a Pad. This function is
// mapped to the path GET /pads/{pad_id}/edit
func (v PadsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Pad
	pad := &models.Pad{}

	if err := tx.Find(pad, c.Param("pad_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, pad))
}

// Update changes a Pad in the DB. This function is mapped to
// the path PUT /pads/{pad_id}
func (v PadsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Pad
	pad := &models.Pad{}

	if err := tx.Find(pad, c.Param("pad_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Pad to the html form elements
	if err := c.Bind(pad); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(pad)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, pad))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "pad.updated.success"))
	// and redirect to the pads index page
	return c.Render(200, r.Auto(c, pad))
}

// Destroy deletes a Pad from the DB. This function is mapped
// to the path DELETE /pads/{pad_id}
func (v PadsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Pad
	pad := &models.Pad{}

	// To find the Pad the parameter pad_id is used.
	if err := tx.Find(pad, c.Param("pad_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(pad); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "pad.destroyed.success"))
	// Redirect to the pads index page
	return c.Render(200, r.Auto(c, pad))
}

// PickPlayer updates the current pad player.
func (v PadsResource) PickPlayer(c buffalo.Context) error {
	return c.Redirect(302, "rootPath()")
}
